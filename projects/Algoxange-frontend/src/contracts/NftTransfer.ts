/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"NftTransfer","structs":{},"methods":[{"name":"create_application","args":[{"type":"asset","name":"asset_id"},{"type":"uint64","name":"unitary_price"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_opt_in","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_transfer","args":[{"type":"asset","name":"asset"},{"type":"account","name":"receiver"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetid":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRpZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[54,82,100],"errorMessage":"OnCompletion is not NoOp"},{"pc":[104],"errorMessage":"can only call when creating"},{"pc":[57,85],"errorMessage":"can only call when not creating"},{"pc":[134,165],"errorMessage":"check self.assetid exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgNAogICAgYnl0ZWNibG9jayAiYXNzZXRpZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgTmZ0VHJhbnNmZXIoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAOQogICAgcHVzaGJ5dGVzcyAweDg3OGNiYjNkIDB4YjZjMmIxNDggMHg0YjE5ZGZkZCAvLyBtZXRob2QgImNyZWF0ZV9hcHBsaWNhdGlvbihhc3NldCx1aW50NjQpdm9pZCIsIG1ldGhvZCAiYXNzZXRfb3B0X2luKGFzc2V0KXZvaWQiLCBtZXRob2QgImFzc2V0X3RyYW5zZmVyKGFzc2V0LGFjY291bnQsdWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9hcHBsaWNhdGlvbl9yb3V0ZUAzIG1haW5fYXNzZXRfb3B0X2luX3JvdXRlQDQgbWFpbl9hc3NldF90cmFuc2Zlcl9yb3V0ZUA1CgptYWluX2FmdGVyX2lmX2Vsc2VAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgTmZ0VHJhbnNmZXIoQVJDNENvbnRyYWN0KToKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fYXNzZXRfdHJhbnNmZXJfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6MjMKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBOZnRUcmFuc2ZlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToyMwogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBhc3NldF90cmFuc2ZlcgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9vcHRfaW5fcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6MTIKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBOZnRUcmFuc2ZlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmZ0X3RyYW5zZmVyL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFzc2V0X29wdF9pbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVfYXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6OAogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCJdLCBjcmVhdGU9InJlcXVpcmUiKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgTmZ0VHJhbnNmZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weTo4CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIl0sIGNyZWF0ZT0icmVxdWlyZSIpCiAgICBjYWxsc3ViIGNyZWF0ZV9hcHBsaWNhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5uZnRfdHJhbnNmZXIuY29udHJhY3QuTmZ0VHJhbnNmZXIuY3JlYXRlX2FwcGxpY2F0aW9uKGFzc2V0X2lkOiB1aW50NjQsIHVuaXRhcnlfcHJpY2U6IHVpbnQ2NCkgLT4gdm9pZDoKY3JlYXRlX2FwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weTo4LTkKICAgIC8vIEBhYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIk5vT3AiXSwgY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBjcmVhdGVfYXBwbGljYXRpb24oc2VsZiwgYXNzZXRfaWQ6IEFzc2V0LCB1bml0YXJ5X3ByaWNlOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6MTAKICAgIC8vIHNlbGYuYXNzZXRpZCA9IGFzc2V0X2lkLmlkCiAgICBieXRlY18wIC8vICJhc3NldGlkIgogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm5mdF90cmFuc2Zlci5jb250cmFjdC5OZnRUcmFuc2Zlci5hc3NldF9vcHRfaW4oYXNzZXQ6IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXRfb3B0X2luOgogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToxMi0xMwogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2V0X29wdF9pbihzZWxmLCBhc3NldDogQXNzZXQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6MTQKICAgIC8vIGFzc2VydCBhc3NldC5pZCA9PSBzZWxmLmFzc2V0aWQKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhc3NldGlkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0aWQgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6MTYtMjEKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmZ0X3RyYW5zZmVyL2NvbnRyYWN0LnB5OjE3CiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZnRfdHJhbnNmZXIvY29udHJhY3QucHk6MTkKICAgIC8vIGFzc2V0X2Ftb3VudD0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToxNgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmZ0X3RyYW5zZmVyL2NvbnRyYWN0LnB5OjIwCiAgICAvLyBmZWU9MCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToxNi0yMQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MCwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMubmZ0X3RyYW5zZmVyLmNvbnRyYWN0Lk5mdFRyYW5zZmVyLmFzc2V0X3RyYW5zZmVyKGFzc2V0OiB1aW50NjQsIHJlY2VpdmVyOiBieXRlcywgYW1vdW50OiB1aW50NjQpIC0+IHZvaWQ6CmFzc2V0X3RyYW5zZmVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToyMy0yNAogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2V0X3RyYW5zZmVyKHNlbGYsIGFzc2V0OiBBc3NldCwgcmVjZWl2ZXI6IEFjY291bnQsIGFtb3VudDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmZ0X3RyYW5zZmVyL2NvbnRyYWN0LnB5OjI1CiAgICAvLyBhc3NlcnQgYXNzZXQuaWQgPT0gc2VsZi5hc3NldGlkCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiYXNzZXRpZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hc3NldGlkIGV4aXN0cwogICAgZnJhbWVfZGlnIC0zCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmZ0X3RyYW5zZmVyL2NvbnRyYWN0LnB5OjI3LTMyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cmVjZWl2ZXIsCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YW1vdW50LAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToyNwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmZ0X3RyYW5zZmVyL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBmZWU9MCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL25mdF90cmFuc2Zlci9jb250cmFjdC5weToyNy0zMgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXJlY2VpdmVyLAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEEJgEHYXNzZXRpZDEbQQAcggMEh4y7PQS2wrFIBEsZ3902GgCOAwAwAB4AAiJDMRkURDEYRDYaARfAMDYaAhfAHDYaAxeIAFIjQzEZFEQxGEQ2GgEXwDCIACEjQzEZFEQxGBRENhoBF8AwNhoCF4gAAiNDigIAKIv+Z4mKAQAiKGVEi/8SRLEyCiKyEov/shGyFCSyECKyAbOJigMAIihlRIv9EkSxi/+yEov9shGL/rIUJLIQIrIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NftTransfer contract
 */
export type NftTransferArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(asset,uint64)void': {
      assetId: bigint
      unitaryPrice: bigint | number
    }
    'asset_opt_in(asset)void': {
      asset: bigint
    }
    'asset_transfer(asset,account,uint64)void': {
      asset: bigint
      receiver: Uint8Array | string
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(asset,uint64)void': [assetId: bigint, unitaryPrice: bigint | number]
    'asset_opt_in(asset)void': [asset: bigint]
    'asset_transfer(asset,account,uint64)void': [asset: bigint, receiver: Uint8Array | string, amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type NftTransferReturns = {
  'create_application(asset,uint64)void': void
  'asset_opt_in(asset)void': void
  'asset_transfer(asset,account,uint64)void': void
}

/**
 * Defines the types of available calls and state of the NftTransfer smart contract.
 */
export type NftTransferTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(asset,uint64)void' | 'create_application', {
      argsObj: NftTransferArgs['obj']['create_application(asset,uint64)void']
      argsTuple: NftTransferArgs['tuple']['create_application(asset,uint64)void']
      returns: NftTransferReturns['create_application(asset,uint64)void']
    }>
    & Record<'asset_opt_in(asset)void' | 'asset_opt_in', {
      argsObj: NftTransferArgs['obj']['asset_opt_in(asset)void']
      argsTuple: NftTransferArgs['tuple']['asset_opt_in(asset)void']
      returns: NftTransferReturns['asset_opt_in(asset)void']
    }>
    & Record<'asset_transfer(asset,account,uint64)void' | 'asset_transfer', {
      argsObj: NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void']
      argsTuple: NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']
      returns: NftTransferReturns['asset_transfer(asset,account,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetid: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NftTransferSignatures = keyof NftTransferTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NftTransferNonVoidMethodSignatures = keyof NftTransferTypes['methods'] extends infer T ? T extends keyof NftTransferTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NftTransfer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NftTransferSignatures> = NftTransferTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NftTransfer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftTransferSignatures> = NftTransferTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NftTransferTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NftTransferCreateCallParams =
  | Expand<CallParams<NftTransferArgs['obj']['create_application(asset,uint64)void'] | NftTransferArgs['tuple']['create_application(asset,uint64)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<NftTransferArgs['obj']['create_application(asset,uint64)void'] | NftTransferArgs['tuple']['create_application(asset,uint64)void']> & {method: 'create_application(asset,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NftTransferDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NftTransferCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NftTransfer smart contract
 */
export abstract class NftTransferParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends NftTransferCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset,uint64)void':
            return NftTransferParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the NftTransfer smart contract using the create_application(asset,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<NftTransferArgs['obj']['create_application(asset,uint64)void'] | NftTransferArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.unitaryPrice],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the asset_opt_in(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetOptIn(params: CallParams<NftTransferArgs['obj']['asset_opt_in(asset)void'] | NftTransferArgs['tuple']['asset_opt_in(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_opt_in(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the asset_transfer(asset,account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTransfer(params: CallParams<NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void'] | NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_transfer(asset,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.receiver, params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NftTransfer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NftTransferFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NftTransferFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NftTransferClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NftTransferClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NftTransfer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NftTransferDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? NftTransferParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (NftTransferCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new NftTransferClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NftTransfer smart contract using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<NftTransferArgs['obj']['create_application(asset,uint64)void'] | NftTransferArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(NftTransferParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NftTransfer smart contract using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<NftTransferArgs['obj']['create_application(asset,uint64)void'] | NftTransferArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(NftTransferParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NftTransfer smart contract using an ABI method call using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<NftTransferArgs['obj']['create_application(asset,uint64)void'] | NftTransferArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(NftTransferParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | NftTransferReturns['create_application(asset,uint64)void']) }, appClient: new NftTransferClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NftTransfer smart contract
 */
export class NftTransferClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NftTransferClient`
   *
   * @param appClient An `AppClient` instance which has been created with the NftTransfer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NftTransferClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NftTransferNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NftTransferClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NftTransferClient> {
    return new NftTransferClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NftTransferClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NftTransferClient> {
    return new NftTransferClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NftTransfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NftTransfer smart contract using the `asset_opt_in(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetOptIn: (params: CallParams<NftTransferArgs['obj']['asset_opt_in(asset)void'] | NftTransferArgs['tuple']['asset_opt_in(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftTransferParamsFactory.assetOptIn(params))
    },

    /**
     * Makes a call to the NftTransfer smart contract using the `asset_transfer(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTransfer: (params: CallParams<NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void'] | NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftTransferParamsFactory.assetTransfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NftTransfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NftTransfer smart contract using the `asset_opt_in(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetOptIn: (params: CallParams<NftTransferArgs['obj']['asset_opt_in(asset)void'] | NftTransferArgs['tuple']['asset_opt_in(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftTransferParamsFactory.assetOptIn(params))
    },

    /**
     * Makes a call to the NftTransfer smart contract using the `asset_transfer(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTransfer: (params: CallParams<NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void'] | NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftTransferParamsFactory.assetTransfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NftTransfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NftTransfer smart contract using the `asset_opt_in(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetOptIn: async (params: CallParams<NftTransferArgs['obj']['asset_opt_in(asset)void'] | NftTransferArgs['tuple']['asset_opt_in(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftTransferParamsFactory.assetOptIn(params))
      return {...result, return: result.return as unknown as (undefined | NftTransferReturns['asset_opt_in(asset)void'])}
    },

    /**
     * Makes a call to the NftTransfer smart contract using the `asset_transfer(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTransfer: async (params: CallParams<NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void'] | NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftTransferParamsFactory.assetTransfer(params))
      return {...result, return: result.return as unknown as (undefined | NftTransferReturns['asset_transfer(asset,account,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NftTransferClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NftTransfer app
   */
  state = {
    /**
     * Methods to access global state for the current NftTransfer app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetid: result.assetid,
        }
      },
      /**
       * Get the current value of the assetid key in global state
       */
      assetid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetid")) as bigint | undefined },
    },
  }

  public newGroup(): NftTransferComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a asset_opt_in(asset)void method call against the NftTransfer contract
       */
      assetOptIn(params: CallParams<NftTransferArgs['obj']['asset_opt_in(asset)void'] | NftTransferArgs['tuple']['asset_opt_in(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetOptIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_transfer(asset,account,uint64)void method call against the NftTransfer contract
       */
      assetTransfer(params: CallParams<NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void'] | NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTransfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the NftTransfer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NftTransferComposer
  }
}
export type NftTransferComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the asset_opt_in(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetOptIn(params?: CallParams<NftTransferArgs['obj']['asset_opt_in(asset)void'] | NftTransferArgs['tuple']['asset_opt_in(asset)void']>): NftTransferComposer<[...TReturns, NftTransferReturns['asset_opt_in(asset)void'] | undefined]>

  /**
   * Calls the asset_transfer(asset,account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransfer(params?: CallParams<NftTransferArgs['obj']['asset_transfer(asset,account,uint64)void'] | NftTransferArgs['tuple']['asset_transfer(asset,account,uint64)void']>): NftTransferComposer<[...TReturns, NftTransferReturns['asset_transfer(asset,account,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NftTransfer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NftTransferComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NftTransferComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NftTransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NftTransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NftTransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NftTransferComposerResults<TReturns>>
}
export type NftTransferComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

